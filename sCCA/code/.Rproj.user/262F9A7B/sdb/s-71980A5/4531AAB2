{
    "collab_server" : "",
    "contents" : "## Load necessary libraries\nrequire('PMA')\nrequire('Matrix')\nrequire('parallel')\nrequire('emdbook')\nrequire('caret')\nrequire('R.matlab')\nrequire('MASS')\nrequire('permute')\nrequire('matrixStats')\nrequire('scales')\n\n## Load Data\nsetwd('~/Desktop/BBL/')\nload(\"./projects/xiaNetworkCca/sCCA/aim1/result/201701/pwr_med_n_trait_rgr.RData\")\nload(\"./projects/xiaNetworkCca/sCCA/aim1/result/201701/pwr_net_n_trait_rgr.RData\")\nnet.data <- unname(power.trait.rgr)\nmed.data <- unname(med.n.trait.rgr)\n#med.data <- unname(subset(med.n.trait.rgr, select = -c(staiPre_q21,staiPre_q23,staiPre_q26,staiPre_q27,staiPre_q30,staiPre_q33,staiPre_q34,staiPre_q36,staiPre_q39)))\ndata <- list(brain = net.data, behavior = med.data)\n\np3Km111.org<-ccaDW(data$brain,data$behavior,0.8,0.4,5)\n\n\n## create sub-CV splits\nload(\"/data/joy/BBL/projects/xiaNetworkCca/sCCA/aim1/result/201701/pwr_trait_qa.RData\")\nsubjid <- sample_qa\n\nsource('./projects/xiaNetworkCca/sCCA/code/cca_functions.R')\n\n# create 3 fold CV sets 10 times in the sub-training set\n\ntrainid <- createDataPartition(subjid$overall_psychopathology_4factor, p = 0.667, list =T,times=10)\n\nbrain_train <- mclapply(trainid, function(id) data$brain[id,])\nbrain_test <- mclapply(trainid, function(id) data$brain[-id,])\n\nbehavior_train <- mclapply(trainid, function(id) data$behavior[id,])\nbehavior_test <- mclapply(trainid, function(id) data$behavior[-id,])\n\n# select best parameters\nx_pen <- seq(0.1,1,length.out=10)\ny_pen <- seq(0.1,1,length.out=10)\n\np3Km111.gs<-ccaDWfoldgs(brain_train,behavior_train,x_pen,y_pen)\np3Km111.cca<-mclapply(seq_along(trainid),function(i) ccaDW(brain_train[[i]],behavior_train[[i]],p3Km111.gs$PENX,p3Km111.gs$PENY,dim(med.data)[2]))\n#p3Km111.cca<-mclapply(seq_along(trainid),function(i) ccaDW(brain_train[[i]],behavior_train[[i]],0.8,0.4,111))\n\np3Km111.org <- ccaDW(data$brain,data$behavior,p3Km111.gs$PENX,p3Km111.gs$PENY,dim(med.data)[2])\n\np3Km111.ve <- sapply(seq_along(trainid), function(i) p3Km111.cca[[i]]$d^2/sum(p3Km111.cca[[i]]$d^2))\n\n# plot ve\n# variance explained plots\nnmed <- dim(med.data)[2]\nvarE <- data.frame( modenum = as.factor(1:nmed),ve_mean = rowMeans(p3Km111.ve),ve_se = rowSds(p3Km111.ve)/sqrt(dim(p3Km111.ve)[2]),vediff = c(abs(diff(rowMeans(p3Km111.ve))),0))\nvarlimits <- aes(ymax = varE$ve_mean + varE$ve_se, ymin=varE$ve_mean - varE$ve_se)\np.var<-ggplot(varE,aes(modenum,ve_mean))+ \n  geom_bar(stat = 'identity',aes(fill = vediff >= mean(vediff)+3*sd(vediff) )) +\n  geom_errorbar(varlimits,  width=0.25) +\n  geom_hline(yintercept = 1/nmed,linetype=\"dashed\") +\n  scale_x_discrete(name =\"Mode\", limits=c(1:20),breaks =  seq(1,20,2)) +\n  scale_y_continuous(expand = c(0, 0),limits=c(0,0.05),labels = percent,name = \"Variance Explained\", breaks=seq(0,0.05,length=5)) +\n  guides(fill = guide_legend(title = \"diff >= 4SD\")) +\n  theme_classic(base_size = 30) +\n  theme(legend.position = c(.5, 0.95),legend.direction = 'horizontal') \np.var\n\nk=4;\n\n# correlation\np3Km111.cor <- sapply(seq_along(trainid), function(i) p3Km111.cca[[i]]$cors)\np3Km111.cor.mean <- rowMeans(p3Km111.cor[1:k,])\n\n# cca corelation plots\ncor <- data.frame(modenum = as.factor(1:111),cor_mean = rowMeans(p3Km111.cor), cor_se = rowSds(p3Km111.cor)/sqrt(dim(p3Km111.cor)[2]) )\ncorlimits <- aes(ymax = cor$cor_mean + cor$cor_se, ymin = cor$cor_mean - cor$cor_se)\np.cor<-ggplot(cor,aes(modenum,cor_mean,label=round(cor_mean,2)))+ \n  geom_bar(width=.5,stat = 'identity', fill = '#80CBC4') +\n  geom_errorbar(corlimits,  width=0.25) +\n  geom_text(size = 5, position = position_dodge(width=0.9), vjust= -1.5,color='grey')+\n  scale_x_discrete(name =\"Mode\", limits=c(1:k)) +\n  ylab('CCA Correlation') +\n  coord_cartesian(ylim=c(0.2,0.8)) +\n  theme_classic(base_size = 30) +\n  theme(legend.position=\"none\")\np.cor\n\n# calculate the CV\np3Km111.cv <- sapply(seq_along(trainid), function(i) { behav_hat<-(brain_test[[i]] %*% p3Km111.cca[[i]]$u[,1:k]) %*% ginv(p3Km111.cca[[i]]$v[,1:k]); out<-cancor(behav_hat,behavior_test[[i]]); out$cor })\n# cross-validation plots\nk=4\ncv <- data.frame(modenum = as.factor(1:k),cv_mean = rowMeans(p3Km111.cv), cv_se = rowSds(p3Km111.cv)/sqrt(dim(p3Km111.cv)[2]) )\ncvlimits <- aes(ymax = cv$cv_mean + cv$cv_se, ymin = cv$cv_mean - cv$cv_se)\np.cv<-ggplot(cv,aes(modenum,cv_mean,label=round(cv_mean,2)))+ \n  geom_bar(width=.5,stat = 'identity', fill = '#80CBC4') +\n  geom_errorbar(cvlimits,  width=0.25) +\n  geom_text(size = 5, position = position_dodge(width=0.9), vjust= -0.8,color='grey')+\n  scale_x_discrete(name =\"Mode\", limits=c(1:k)) +\n  ylab('Cross-Validation Accuracy') +\n  coord_cartesian(ylim=c(0.2,0.8)) +\n  theme_classic(base_size = 30) +\n  theme(legend.position=\"none\")\np.cv\n\n# build a null model \nbehavior.perm <- rlply(1000,data$behavior[sample(nrow(data$behavior)),])\np3Km111.perm.cor<-sapply(behavior.perm, function(y_perm){ out<-ccaDWpermorder(data$brain,y_perm,p3Km111.gs$PENX,p3Km111.gs$PENY,k,data$behavior); out$cor} )\np3Km111.perm.cor<-sapply(behavior.perm, function(y_perm){ out<-ccaDWpermrank(data$brain,y_perm,p3Km111.gs$PENX,p3Km111.gs$PENY,k); out$cors} )\n\n# permutation plots\nperm <- as.data.frame(t(p3Km111.perm.cor))\n\n## dim1\np.val <- (1+length(which(perm$V1 >= p3Km111.cor.mean[1]))) /1000\np <- ggplot(perm,aes(V1))+\n  geom_histogram(binwidth = 0.005, fill = \"blue\", alpha = 0.5)  +\n  geom_vline(xintercept = p3Km111.cor.mean[1], colour = \"red\", linetype = \"longdash\") +\n  labs(x = \"Correlations\") +\n  annotate(\"text\", x = median(perm$V1), y = c(10,5),label = c(\"Permuted Data\",\"(1000 times)\"),size =10,colour = \"black\" ) +\n  annotate(\"text\",x = -Inf, y = Inf, hjust = -0.1,vjust = 1,label = paste(\"Cor=\",round(p3Km111.cor.mean[1],2),\", p<\",p.val), size = 10, colour = \"red\" ) +\n  theme_classic(base_size = 35) \np\n\n## dim2\np.val <- (1+length(which(perm$V2 >= p3Km111.cor.mean[2]))) /1000\np <- ggplot(perm,aes(V2))+\n  geom_histogram(binwidth = 0.005, fill = \"blue\", alpha = 0.5)  +\n  geom_vline(xintercept = p3Km111.cor.mean[2], colour = \"red\", linetype = \"longdash\") +\n  labs(x = \"Correlations\") +\n  annotate(\"text\", x = median(perm$V2), y = c(10,5),label = c(\"Permuted Data\",\"(1000 times)\"),size =10,colour = \"black\" ) +\n  annotate(\"text\",x = -Inf, y = Inf, hjust = -0.1,vjust = 1, label = paste(\"Cor=\",round(p3Km111.cor.mean[2],2),\", p<\",p.val), size = 10, colour = \"red\" ) +\n  theme_classic(base_size = 35) \np\n\n## dim3\np.val <- (1+length(which(perm$V3 >= p3Km111.cor.mean[3]))) /1000\np <- ggplot(perm,aes(V3))+\n  geom_histogram(binwidth = 0.005, fill = \"blue\", alpha = 0.5)  +\n  geom_vline(xintercept = p3Km111.cor.mean[3], colour = \"red\", linetype = \"longdash\") +\n  labs(x = \"Correlations\") +\n  annotate(\"text\", x = median(perm$V3), y = c(10,5),label = c(\"Permuted Data\",\"(1000 times)\"),size =10,colour = \"black\" ) +\n  annotate(\"text\",x = -Inf, y = Inf, hjust = -0.1,vjust = 1, label = paste(\"Cor=\",round(p3Km111.cor.mean[3],2),\", p<\",p.val), size = 10, colour = \"red\" ) +\n  theme_classic(base_size = 35) \np\n\n\n## bootstrap\nbootid<-createResample(subjid$overall_psychopathology_4factor, list = T, times = 10)\nbrain_boot <- mclapply(bootid, function(id) data$brain[id,])\nbehavior_boot <- mclapply(bootid, function(id) data$behavior[id,])\n\n\np3Km111.org<-ccaDW(data$brain,data$behavior,0.8,0.4,3)\n\np3Km111.boot<- mclapply(seq_along(bootid),function(i) ccaDW(brain_boot[[i]],behavior_boot[[i]],0.8,0.4,3))\n\np3Km111.boot.ro<- mclapply(seq_along(bootid),function(i) reorderCCA(p3Km111.boot[[i]],p3Km111.org) )\n\n\n",
    "created" : 1486486456945.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1929305844",
    "id" : "4531AAB2",
    "lastKnownWriteTime" : 1486702564,
    "last_content_update" : 1486702564596,
    "path" : "~/Desktop/BBL/projects/xiaNetworkCca/sCCA/code/sCCA_CV_pwr_trait.R",
    "project_path" : "sCCA_CV_pwr_trait.R",
    "properties" : {
        "source_window_id" : ""
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}